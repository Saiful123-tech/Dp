long long mod = 1000000007;
class Solution {
  public:
  
   long long  int Solve(int i,int j, vector<vector<int>> &dp){
        if(i==0 && j==0){
            return 1;
        }
        if(i<0 || j<0){
            return 0;
        }
        if(dp[i][j]!=-1){
            return dp[i][j];
        }
        int upper=Solve(i-1,j,dp);
        int left=Solve(i,j-1,dp);
        dp[i][j]=(upper+left)%mod;
        return dp[i][j];
    }
    long long int numberOfPaths(int m, int n){
        // code here
         vector<vector<int>> dp(m,vector<int>(n,-1));
                      
         return Solve(m-1,n-1,dp);
         
    }
};
Tabulation Method tc o(m*n) sc o(m*n)
  long long int tabulation(int m,int n, vector<vector<int>> &dp){
         
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(i==0 &&  j==0){
                    dp[i][j]=1;
                    continue;
                }
                else{
                    int up=0,left=0;
                    if(i>0){
                        up=dp[i-1][j];
                    }
                    if(j>0){
                        left=dp[i][j-1];
                    }
                    dp[i][j]=(up+left)%mod;
                }
            }
        }
        return dp[m-1][n-1]; 
    }
    Space Optimztion o(m*n) sc o(m+n)
     int tabulation(int m,int n, vector<vector<int>> &dp){
         
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(i==0 &&  j==0){
                    dp[i][j]=1;
                    continue;
                }
                else{
                    int up=0,left=0;
                    if(i>0){
                        up=dp[i-1][j];
                    }
                    if(j>0){
                        left=dp[i][j-1];
                    }
                    dp[i][j]=up+left;
                }
            }
        }
        return dp[m-1][n-1]; 
    }
   int optimize(int m,int n){
      
       vector<int> prev(n,0);
    for(int i=0; i<m; i++){
        vector<int> temp(n,0);
        for(int j=0; j<n; j++){
            if(i==0 && j==0){
                temp[j]=1;
                continue;
            }
            
            int up=0;
            int left =0;
            
            if(i>0)
                up = prev[j];
            if(j>0)
                left = temp[j-1];
                
            temp[j] = up + left;
        }
        prev = temp;
    }
    
    return prev[n-1];
    }
