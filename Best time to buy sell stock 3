class Solution {
public:
    int helper(int index,int buy,int cap,vector<int> &prices,vector<vector<vector<int>>> &dp){
        if(cap==0){
            return 0;
        }
        if(index==prices.size()){
            return 0;
        }
       if(dp[index][buy][cap]!=-1){
           return dp[index][buy][cap];
       }
        int profit=INT_MIN;
       if(buy){
      profit = max(-prices[index]+helper(index+1,0,cap,prices,dp),0+helper(index+1,1,cap,prices,dp));     
       }
    else{
  profit = max(prices[index]+helper(index+1,1,cap-1,prices,dp),0+helper(index+1,0,cap,prices,dp));    
    }
   return dp[index][buy][cap] = profit;     
    }
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        vector<vector<vector<int>>> dp(n+1,vector<vector<int>>(2,vector<int>(3,0)));
       // return helper(0,1,2,prices,dp);
       // 1st base case   if(cap==0)
        for(int i=0;i<=n;i++){
          for(int buy=0;buy>2;buy++){
              dp[i][buy][0] = 0;
          }  
        }
        //2 nd base case if(i==n)
        for(int buy=0;buy<2;buy++){
            for(int cap=0;cap<=2;cap++){
             dp[n][buy][cap] = 0;
            }
        }
        for(int i=n-1;i>=0;i--){
            for(int j=0;j<=1;j++){
                for(int k=1;k<=2;k++){
                    if(j==1){
              dp[i][j][k] = max(-prices[i]+dp[i+1][0][k],0+dp[i+1][1][k]);          
                    }
             else{
             dp[i][j][k] = max(prices[i]+dp[i+1][1][k-1],0+dp[i+1][0][k]);    
             }
                }
            }
        }
        return dp[0][1][2];
    }
};
