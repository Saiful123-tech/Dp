#include<bits/stdc++.h>
bool Solve(int index,int k, vector<int> &arr,vector<vector<int>> &dp){

   
    if(k==0)
        return true;
    
    if(index == 0)
        return arr[0] == k;
    
    if(dp[index][k]!=-1)
        return dp[index][k];
       bool taken = false;
    if(arr[index]<=k)
        taken = Solve(index-1,k-arr[index],arr,dp);    
    bool notTaken = Solve(index-1,k,arr,dp);
    
 
        
    return dp[index][k]= notTaken||taken; 
}
bool optimization(int n, int k, vector<int> &arr){
     vector<bool> prev(k+1,false);
    
    prev[0] = true;
    
    if(arr[0]<=k)
        prev[arr[0]] = true;
    
    for(int ind = 1; ind<n; ind++){
        vector<bool> cur(k+1,false);
        cur[0] = true;
        for(int target= 1; target<=k; target++){
            bool notTaken = prev[target];
    
            bool taken = false;
                if(arr[ind]<=target)
                    taken = prev[target-arr[ind]];
        
            cur[target]= notTaken||taken;
        }
        prev = cur;
    }
    
    return prev[k];
}

bool subsetSumToK(int n, int k, vector<int> &arr) {
    // Write your code here.
  /*  vector<vector<int>> dp(n,vector<int>(k+1,-1));
    return Solve(n-1,k,arr,dp);  */
  /*  vector<vector<bool>> dp(n,vector<bool>(k+1,false));
    for(int i=0;i<n;i++){
        dp[i][0] = true;
        }
    dp[0][arr[0]]=true;
    for(int index=1;index<n;index++){
        for(int target=1;target<=k;target++){
            bool nottaken = dp[index-1][target];
       bool taken = false;
    if(arr[index]<=target)
        taken = dp[index-1][target-arr[index]];
        
        dp[index][target] = taken | nottaken;
        }
    }
    return dp[n-1][k]; */
    return optimization(n-1,k,arr);
}
