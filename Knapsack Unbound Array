//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
// User function Template for C++
TC o(n*w)
SC o(W) + o(n*w)
class Solution{
public:
    int helper(int index,int W,int val[],int wt[],vector<vector<int>> &dp){
        if(index==0){
            return ((int)(W/wt[0])) * val[0];
        }
        if(dp[index][W]!=-1){
            return dp[index][W];
        }
        int notpick = 0 + helper(index-1,W,val,wt,dp);
        int pick = INT_MIN;
        if(wt[index]<=W){
            pick = val[index] + helper(index,W-wt[index],val,wt,dp);
        }
        dp[index][W] = max(notpick,pick);
        return dp[index][W];
    }
TC o(n*w)
SC o(W) 
    int knapSack(int N, int W, int val[], int wt[])
    {
        // code here
           vector<vector<int>> dp(N,vector<int>(W+1,0));
    //return helper(N-1,W,val,wt,dp);
    for(int i=0;i<=W;i++){
        dp[0][i] = ((int)(i/wt[0])) * val[0];
    }
    for(int i=1;i<N;i++){
        for(int j=0;j<=W;j++){
            int notpick = 0 + dp[i-1][j];
            int pick = INT_MIN;
            if(wt[i]<=j){
                pick = val[i] + dp[i][j-wt[i]];
            }
            dp[i][j] = max(notpick,pick);
        }
    }
    return dp[N-1][W];
 
    }
};

//{ Driver Code Starts.

int main(){
    int t;
    cin>>t;
    while(t--){
        int N, W;
        cin>>N>>W;
        int val[N], wt[N];
        for(int i = 0;i < N;i++)
            cin>>val[i];
        for(int i = 0;i < N;i++)
            cin>>wt[i];
        
        Solution ob;
        cout<<ob.knapSack(N, W, val, wt)<<endl;
    }
    return 0;
}
// } Driver Code Ends
