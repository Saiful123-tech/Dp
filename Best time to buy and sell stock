class Solution {
public:
    int helper(int index,int buy,vector<int>& prices,vector<vector<int>> &dp){
        if(index==prices.size()){
           return 0;
        }
        if(dp[index][buy]!=-1){
            return dp[index][buy];
        }
        if(buy==1){
       dp[index][buy] = max(-prices[index]+helper(index+1,0,prices,dp),0+ helper(index+1,1,prices,dp));    
        }
        else{
        dp[index][buy] = max(prices[index] + helper(index+1,1,prices,dp), 0+ helper(index+1,0,prices,dp));
        }
        return dp[index][buy];
    }
    int maxProfit(vector<int>& prices) {
        vector<vector<int>> dp(prices.size()+1,vector<int>(2,0));
        //return helper(0,1,prices,dp);
        dp[prices.size()][0] = dp[prices.size()][1] = 0;
        for(int i=prices.size()-1;i>=0;i--){
            for(int j=0;j<2;j++){
                if(j==1){
                  dp[i][j] = max(-prices[i]+dp[i+1][0],0+dp[i+1][1]);  
                }
                else{
                    dp[i][j] = max(prices[i]+dp[i+1][1],0+dp[i+1][0]);
                }
            }
        }
        return dp[0][1];
    }
};
