int helper(int index,vector<int> &nums,int sum,vector<vector<int>> &dp){
      
      if(index==0){
            if(sum==0 && nums[index]==0){
                return 2;
            }
            if(sum==0 || nums[0]==sum){
                return 1;
            }
            return 0;
        }
        if(dp[index][sum]!=-1){
            return dp[index][sum];
        }
        int notpick=helper(index-1,nums,sum,dp);
        int pick=0;
        if(nums[index]<=sum){
            pick=helper(index-1,nums,sum-nums[index],dp);
        }
        dp[index][sum] = (notpick+pick);
        return dp[index][sum];
    }
int findWays(vector<int> &num, int tar)
{
    // Write your code here.
     int n=num.size();
        int sum=tar;
        vector<vector<int>> dp(n,vector<int>(sum+1,-1));
         return helper(n-1,num,sum,dp);
}

int findWays(vector<int> &num, int tar)
{
    // Write your code here.
     int n=num.size();
        int sum=tar;
        vector<vector<int>> dp(n,vector<int>(sum+1,0));
       //  return helper(n-1,num,sum,dp);
       for(int i=0;i<n;i++){
           dp[i][0] = 1;
       }
    if(num[0]<=tar){
        dp[0][num[0]] = 1;
    }
    
    for(int index=1;index<n;index++){
        for(int target=1;target<=sum;target++){
            int notpick=dp[index-1][target];
            int pick = 0;
            if(num[index]<=target){
                pick = dp[index-1][target-num[index]];
            }
            dp[index][target] = notpick + pick ;
        }
    }
    return dp[n-1][tar];
}
