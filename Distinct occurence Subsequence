//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;
 

// } Driver Code Ends
/*You are required to complete this method*/

class Solution
{
    public:
    int mod= 1000000007;
    TC 0(n*m);
     SC o(n*m) + o(n+m)
    int helper(int i,int j,string &S,string &T,vector<vector<int>> &dp){
        if(j<0){
            return 1;
        }
        if(i<0){
            return 0;
        }
        if(dp[i][j]!=-1){
            return dp[i][j];
        }
        if(S[i]==T[j]){
        return dp[i][j] = (helper(i-1,j-1,S,T,dp) + helper(i-1,j,S,T,dp))%mod;
        }
        else{
        return dp[i][j] = helper(i-1,j,S,T,dp)%mod;
        }
    }
    int subsequenceCount(string S, string T)
    {
      //Your code here
      int n=S.size();
      int m=T.size();
    //  vector<vector<int>> dp(n,vector<int>(m,-1));
     // return helper(n-1,m-1,S,T,dp);
     // Tabulation
     TC o(n*m)
     SC o(n*m) 
     vector<vector<int>> dp(n+1,vector<int>(m+1,0));
     for(int i=0;i<=n;i++){
         dp[i][0] = 1;
     }
     for(int i=1;i<=n;i++){
         for(int j=1;j<=m;j++){
             if(S[i-1]==T[j-1]){
              dp[i][j] = (dp[i-1][j-1] + dp[i-1][j])%mod;
             }
             else{
                 dp[i][j] = dp[i-1][j]%mod;
             }
         }
     }
     return dp[n][m];
    }
};
 


//{ Driver Code Starts. 

//  Driver code to check above method
int main()
{
	int t;
	cin>>t;
	while(t--)
	{
		string s;
		string tt;
		cin>>s;
		cin>>tt;
		
		Solution ob;
		cout<<ob.subsequenceCount(s,tt)<<endl;
		
		
	}
  
}
// } Driver Code Ends
Space Optimization Approach 1
TC o(n*m)
SC o(m+m)
int optimize1(string S,string T,int n,int m){
        vector<int> prev(m+1,0),cur(m+1,0);
        prev[0] = cur[0] =  1;
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(S[i-1]==T[j-1]){
                    cur[j] = (prev[j-1] + prev[j]) % mod;
                }
            }
            prev = cur;
        }
        return cur[m];
    }
 Space Optimzation Approach 2
 TC o(n*m)
 SC o(m)
  int optimize2(string S,string T,int n,int m){
        vector<int> prev(m+1,0);
        prev[0] = 1;
        for(int i=1;i<=n;i++){
            for(int j=m;j>=0;j--){
                if(S[i-1]==T[j-1]){
                    prev[j] = (prev[j-1] + prev[j]) % mod;
                }
            }
        }
        return prev[m];
    }
