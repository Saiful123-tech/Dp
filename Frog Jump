Top down approach 
TC o(N) SC o(N)+o(N)

#include<bits/stdc++.h>
int solve(int index,vector<int> &heights,vector<int> &dp){
    if(index==0){
        return 0;
    }
    if(dp[index]!=-1){
        return dp[index];
    }
    int left=solve(index-1,heights,dp) + abs(heights[index]-heights[index-1]);
    int right=INT_MAX;
    if(index>1){
    right=solve(index-2,heights,dp) + abs(heights[index]-heights[index-2]);
    }
     dp[index]=min(left,right);
 return dp[index];
}
int frogJump(int n, vector<int> &heights)
{
    // Write your code here.
    vector<int> dp(n+1,-1);
    int ans=solve(n-1,heights,dp);
    return ans;
    
}

Bottom Up approach  (Tabulation)
TC o(N) Sc o(N)

int frogJump(int n, vector<int> &heights)
{
    // Write your code here.
    vector<int> dp(n);
    dp[0]=0;
    for(int i=1;i<n;i++){
        int fs=dp[i-1] + abs(heights[i]-heights[i-1]);
        int s=INT_MAX;
        if(i>1){
            s=dp[i-2] +  abs(heights[i]-heights[i-2]);
        }
        dp[i] = min(fs,s);
    }
    return dp[n-1];
    
}

Best Approach
TC o(n) SC o(1)

#include<bits/stdc++.h>
int solve(int index,vector<int> &heights,vector<int> &dp){
    if(index==0){
        return 0;
    }
    if(dp[index]!=-1){
        return dp[index];
    }
    int left=solve(index-1,heights,dp) + abs(heights[index]-heights[index-1]);
    int right=INT_MAX;
    if(index>1){
    right=solve(index-2,heights,dp) + abs(heights[index]-heights[index-2]);
    }
     dp[index]=min(left,right);
 return dp[index];
}
int frogJump(int n, vector<int> &heights)
{
    // Write your code here.
    int prev1=0;
    int prev2=0;
    int current =0;
    for(int i=1;i<n;i++){
        int fs=prev1 + abs(heights[i]-heights[i-1]);
        int s=INT_MAX;
        if(i>1){
            s=prev2 +  abs(heights[i]-heights[i-2]);
        }
        current = min(fs,s);
        prev2=prev1;
        prev1=current;
    }
    return prev1;
    
}



