Memiozation
tc o(n*n)
sc o(n*n) + o(n*n)
Tabulation tc o(n*w)
sc o(n*w)
Space sc o(n)
#include<bits/stdc++.h>
int Solve(int i,int j,vector<vector<int>>& triangle, int n,vector<vector<int>>& dp){
    if(i==n-1){
        return triangle[i][j];
    }
    if(dp[i][j]!=-1){
        return dp[i][j];
    }
   int d = triangle[i][j] + Solve(i+1,j,triangle,n,dp);
   int dg = triangle[i][j] + Solve(i+1,j+1,triangle,n,dp);
   dp[i][j] = min(d,dg);
    return dp[i][j];
}
int tabulation(vector<vector<int>>& triangle,int n,vector<vector<int>>& dp){

   for(int j=0;j<n;j++){
       dp[n-1][j] = triangle[n-1][j];
   }
    for(int i=n-2;i>=0;i--){
        for(int j=i;j>=0;j--){
         int d= triangle[i][j] + dp[i+1][j];
      int dg= triangle[i][j] + dp[i+1][j+1];
            dp[i][j] = min(d,dg);
        }
    }
    return dp[0][0];
}
int optimize(vector<vector<int>>& triangle, int n){
    vector<int> front(n,0),cur(n,0);
    for(int j=0;j<n;j++){
        front[j]=triangle[n-1][j];
    }
    for(int i=n-2;i>=0;i--){
       for(int j=i;j>=0;j--){
         int d = triangle[i][j] + front[j];
         int dg = triangle[i][j] + front[j+1];
           cur[j] = min(d,dg);
           
       }
        front = cur;
    }
    return front[0];
}
int minimumPathSum(vector<vector<int>>& triangle, int n){
	// Write your code here.
   vector<vector<int>> dp(n,vector<int>(n,-1));
 //return tabulation(triangle,n,dp);
    return optimize(triangle,n);
}
