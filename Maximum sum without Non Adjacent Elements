top down Approach tc = o(n) sc = o(n+n)
#include<bits/stdc++.h>
int solve(vector<int> &nums,int index,vector<int> &dp){
    if(index==0){
        return nums[index];
    }
    if(index<0){
        return 0;
    }
    if(dp[index]!=-1){
        return dp[index];
    }
    int pick=nums[index]+solve(nums,index-2,dp);
    int notpick=0+solve(nums,index-1,dp);
    dp[index]=max(pick,notpick);
    return dp[index];
              }

Tabulation tc o(n) sc = o(n)
int maximumNonAdjacentSum(vector<int> &nums){
    // Write your code here.
    vector<int> dp(nums.size(),-1);
    dp[0]=nums[0];
    for(int i=1;i<nums.size();i++){
         int pick=nums[i];
        if(i>1){
           pick=pick+dp[i-2];
       }
      int npick=0+dp[i-1];
        dp[i]=max(pick,npick);
    }
    return dp[nums.size()-1];
}
Space Optimization Approach tc = o(n) sc = o(1)
int maximumNonAdjacentSum(vector<int> &nums){
    // Write your code here.
   int prev1=nums[0];
    int prev2=0;
    int current;
    for(int i=1;i<nums.size();i++){
         int pick=nums[i];
        if(i>1){
           pick=pick+prev2;
       }
      int npick=0+prev1;
        prev2=prev1;
        prev1 = max(pick,npick);
        
    }
    return prev1;
}
