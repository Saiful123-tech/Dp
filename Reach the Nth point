Top down Approach
tc o(n)
sc o(n)+o(n)
class Solution{
	public:
	int mod=1000000007;
	int helper(int index,vector<int> &dp){
	if(index==0 || index==1){
	    return 1;
	}
	if(dp[index]!=-1){
	    return dp[index];
	}
	int left=helper(index-1,dp);
	int right=helper(index-2,dp);
	dp[index]=(left+right)%mod;
	return dp[index];
	}
		int nthPoint(int n){
		    // Code here
		    vector<int> dp(n+1,-1);
		    return helper(n,dp);
		}
};
Bottom Approach
tc o(n)
sc o(n)
int nthPoint(int n){
		    // Code here
		    
		    vector<int> dp(n+1,-1);
		    dp[0]=1;
		    dp[1]=1;
		    for(int i=2;i<=n;i++){
		        dp[i]=(dp[i-1]+dp[i-2])%mod;
		    }
		    return dp[n];
		   
		}
 Space Optimaztion Approach
 tc o(n)
 sc o(1)
 	int nthPoint(int n){
		    // Code here
		    
		    
		    int prev2=1;
		    int prev1=1;
		    for(int i=2;i<=n;i++){
		        int current;
		        current=(prev1+prev2)%mod;
		         prev2=prev1;
		         prev1=current;
		    }
		    return prev1;
		   
		}
