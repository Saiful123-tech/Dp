class Solution{

	public:
	int helper(int coins[],int index,int target,vector<vector<int>> &dp){
	    if(index==0){
	        if(target%coins[index]==0){
	            return target/coins[index];
	        }
	        else{
	            return 1e9;
	        }
	    }
	    if(dp[index][target]!=-1){
	        return dp[index][target];
	    }
	    int nottake = 0 + helper(coins,index-1,target,dp);
	    int take = INT_MAX;
	    if(coins[index]<=target){
	        take = 1 + helper(coins,index,target-coins[index],dp);
	    }
	   dp[index][target] = min(nottake,take);
	}
	int optimization(int coins[], int M, int V){
	    vector<int> prev(V+1,0),cur(V+1,0);
	    for(int target=0;target<=V;target++){
	        if(target%coins[0]==0){
	            prev[target] = target / coins[0];
	        }
	        else{
	            prev[target] = 1e9;
	        }
	    }
	    for(int i=1;i<M;i++){
	        for(int target=0;target<=V;target++){
	            int nottake = 0 + prev[target];
	            int take = 1e9;
	            if(coins[i]<=target){
	                take = 1 + prev[target-coins[i]];
	            }
	            cur[target] = min(nottake,take);
	        }
	        prev=cur;
	    }
	    int ans=prev[V];
	    if(ans>=1e9){
	        return -1;
	    }
	    return ans;
	}
	int minCoins(int coins[], int M, int V) 
	{ 
//	 return optimization(coins,M,V);
	    // Your code goes here
	 //   vector<vector<int>> dp(M,vector<int>(V+1,-1));
	  vector<vector<int>> dp(M,vector<int>(V+1,0));
	 //  int ans =  helper(coins,M-1,V,dp);
	 for(int t=0;t<=V;t++){
	     if(t%coins[0]==0){
	         dp[0][t] = t/coins[0];
	     }
	     else{
	         dp[0][t] = 1e9;
	     }
	 }
	 for(int i=1;i<M;i++){
	     for(int target=0;target<=V;target++){
	         int nottake = 0  + dp[i-1][target];
	         int take = 1e9;
	         if(coins[i]<=target){
	             take = 1 + dp[i][target-coins[i]];
	         }
	         dp[i][target] = min(nottake,take);
	     }
	 } 
	 int ans = dp[M-1][V];   
	   if(ans>=1e9){
	       return -1;
	   }
	   return ans;
	} 
	  
};
