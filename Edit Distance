Meoization
TC o(n*m)
SC o(n*m) + o(n+m)
int helper(int i,int j,string s,string t,vector<vector<int>> &dp){
        if(i<0){
            return j+1;
        }
        if(j<0){
            return i+1;
        }
        if(dp[i][j]!=-1){
            return dp[i][j];
        }
        if(s[i]==t[j]){
        return  dp[i][j] = 0 + helper(i-1,j-1,s,t,dp);
        }
       return  dp[i][j] = 1 + min(helper(i-1,j,s,t,dp),min(helper(i,j-1,s,t,dp),helper(i-1,j-1,s,t,dp)));
    }
    
  Tabulation
  TC o(n*m)
  SC o(n*m)
    int editDistance(string s, string t) {
        // Code here
        int n=s.size();
        int m=t.size();
      // vector<vector<int>> dp(n,vector<int>(m,-1));
       // return helper(n-1,m-1,s,t,dp);
       vector<vector<int>> dp(n+1,vector<int>(m+1,0));
       for(int i=0;i<=m;i++){
           dp[0][i] = i;
       }
       for(int j=0;j<=n;j++){
           dp[j][0] = j;
       }
       for(int i=1;i<=n;i++){
           for(int j=1;j<=m;j++){
               if(s[i-1]==t[j-1]){
                 dp[i][j] = 0 + dp[i-1][j-1];
               }
               else{
                   dp[i][j] = 1 + min(dp[i-1][j],min(dp[i][j-1],dp[i-1][j-1]));
               }
           }
       }
       return dp[n][m];
    }
   Space optimize approach
   tc o(n*m) SC o(m)
     int optimize(string s,string t){
         int n=s.size();
         int m=t.size();
         vector<int> cur(m+1,0),prev(m+1,0);
         for(int i=0;i<=m;i++){
             prev[i] = i;
         }
         for(int i=1;i<=n;i++){
             cur[0] = i;
             for(int j=1;j<=m;j++){
                 if(s[i-1]==t[j-1]){
                    cur[j] = 0 + prev[j-1]; 
                 }
                 else{
                cur[j] = 1 +  min(prev[j],min(cur[j-1],prev[j-1]));   
                 }
             }
             prev = cur;
         }
         return prev[m];
         
    }
