class Solution {
public:
    int maxProfit(int k, vector<int>& prices) {
        int n=prices.size();
        vector<vector<vector<int>>> dp(n+1,vector<vector<int>>(2,vector<int>(k+1,0)));
       // return helper(0,1,2,prices,dp);
       // 1st base case   if(cap==0)
        for(int i=0;i<=n;i++){
          for(int buy=0;buy>2;buy++){
              dp[i][buy][k] = 0;
          }  
        }
        //2 nd base case if(i==n)
        for(int buy=0;buy<2;buy++){
            for(int cap=0;cap<=k;cap++){
             dp[n][buy][cap] = 0;
            }
        }
        for(int i=n-1;i>=0;i--){
            for(int j=0;j<=1;j++){
                for(int l=1;l<=k;l++){
                    if(j==1){
              dp[i][j][l] = max(-prices[i]+dp[i+1][0][l],0+dp[i+1][1][l]);          
                    }
             else{
             dp[i][j][l] = max(prices[i]+dp[i+1][1][l-1],0+dp[i+1][0][l]);    
             }
                }
            }
        }
        return dp[0][1][k]; 
    }
};
