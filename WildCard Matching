//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution{
  public:
/*You are required to complete this method*/
    bool helper(int i,int j,string &pattern,string &str,vector<vector<int>> &dp){
        if(i<0 && j<0){
            return true;
        }
        if(i<0 && j>=0){
            return false;
        }
        if(i>=0 && j<0){
            for(int k=0;k<=i;k++){
                if(pattern[k]!='*'){
                    return false;
                }
            }
            return true;
        }
        if(dp[i][j]!=-1){
            return dp[i][j];
        }
    if(pattern[i]==str[j] || pattern[i]=='?'){
      return  dp[i][j] = helper(i-1,j-1,pattern,str,dp);
    }    
    if(pattern[i]=='*'){
        return dp[i][j] =  helper(i-1,j,pattern,str,dp) | helper(i,j-1,pattern,str,dp);
    }
    return dp[i][j] = false;
    }
    int wildCard(string pattern,string str)
    {
        int n=pattern.size();
        int m = str.size();
/*        vector<vector<int>> dp(n,vector<int>(m,-1));
     
        if(helper(n-1,m-1,pattern,str,dp)){
            return 1;
        }
        return 0;  */
        vector<vector<bool>> dp(n+1,vector<bool> (m+1,false));
        dp[0][0] = true;
        for(int j=1;j<=m;j++){
            dp[0][j] = false;
        }
        for(int i=1;i<=n;i++){
            bool flag=true;
            for(int k=1;k<=i;k++){
                if(pattern[k-1]!='*'){
                    flag=false;
                    break;
                }
            }
            dp[i][0] = flag;
        }
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                 if(pattern[i-1]==str[j-1] || pattern[i-1]=='?'){
        dp[i][j] = dp[i-1][j-1];
    }    
   else if(pattern[i-1]=='*'){
     dp[i][j] =  dp[i-1][j] | dp[i][j-1];
    }
    else{
 dp[i][j] = false;
    }
            }
        }
        if(dp[n][m]){
            return 1;
        }
        return 0;
    }
};

//{ Driver Code Starts.
int main()
{
   int t;
   cin>>t;
   while(t--)
   {
           string pat,text;
           cin>>pat;
cin.ignore(numeric_limits<streamsize>::max(),'\n');
           cin>>text;
           Solution obj;
           cout<<obj.wildCard(pat,text)<<endl;
   }
}

// } Driver Code Ends
