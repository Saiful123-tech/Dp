//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends


class Solution
{
    public:
    //Function to find length of longest increasing subsequence.
    int helper(int index,int prev,int a[],int n,vector<vector<int>> &dp){
        if(index==n){
            return 0;
        }
        if(dp[index][prev+1]!=-1){
            return dp[index][prev+1];
        }
        int len=0 +helper(index+1,prev,a,n,dp); 
        if(prev==-1 || a[index]>a[prev]){
            len=max(len,1 + helper(index+1,index,a,n,dp));
        }
      return dp[index][prev+1]=len;
    }
     int tabulation(int n,int a[]){
     TC o(n*n)
     Sc o(n*n)
        vector<vector<int>> dp(n+1,vector<int>(n+1,0));
        for(int i=n-1;i>=0;i--){
            for(int prev=i-1;prev>=-1;prev--){
                int len = 0 + dp[i+1][prev+1];
                if(prev==-1 || a[i]>a[prev]){
                    len=max(len,1+dp[i+1][i+1]);
                }
                dp[i][prev+1] = len; 
            }
        }
        return dp[0][-1+1];
    }
    int optimize2(int n,int a[]){
    TC o(n*n)
    SC o(n)
        vector<int> dp(n+1,1);
        int maxi=dp[0];
        for(int i=1;i<n;i++){
          for(int prev=0;prev<i;prev++){
              if(a[i]>a[prev]){
                  dp[i] = max(dp[i],1+dp[prev]);
                  maxi=max(maxi,dp[i]);
              }
          }
        }
        return maxi;
    }
     int optimize(int n,int a[]){
     // tc o(n*n);
     SC o(n)
     //   vector<vector<int>> dp(n+1,vector<int>(n+1,0));
       vector<int> next(n+1,0),cur(n+1,0);
        for(int i=n-1;i>=0;i--){
            for(int prev=i-1;prev>=-1;prev--){
                int len = 0 + next[prev+1];
                if(prev==-1 || a[i]>a[prev]){
                    len=max(len,1+next[i+1]);
                }
                cur[prev+1] = len; 
            }
            next=cur;
        }
        return cur[-1+1];
    }
    int longestSubsequence(int n, int a[])
    {
       // your code here
       vector<vector<int>> dp(n,vector<int> (n+1,-1));
       return helper(0,-1,a,n,dp);
    }
};
int lcs_binary(int n,int a[]){
   TC (n*log(n))
   SC o(n)
        vector<int> v;
        v.push_back(a[0]);
        for(int i=1;i<n;i++){
            if(a[i]>v[v.size()-1]){
                v.push_back(a[i]);
                continue;
            }
            auto itr = lower_bound(v.begin(),v.end(),a[i]) - v.begin();
            v[itr] = a[i];
        }
        
        return v.size();
    }

//{ Driver Code Starts.
int main()
{
    //taking total testcases
    int t,n;
    cin>>t;
    while(t--)
    {
        //taking size of array
        cin>>n;
        int a[n];
        
        //inserting elements to the array
        for(int i=0;i<n;i++)
            cin>>a[i];
        Solution ob;
        //calling method longestSubsequence()
        cout << ob.longestSubsequence(n, a) << endl;
    }
}

// } Driver Code Ends
